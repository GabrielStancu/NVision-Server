// <auto-generated />
using System;
using Core.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Core.Migrations
{
    [DbContext(typeof(NVisionDbContext))]
    [Migration("20211213235414_AddedWatcherToAlert")]
    partial class AddedWatcherToAlert
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Models.Alert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<bool?>("WasTrueAlert")
                        .HasColumnType("bit");

                    b.Property<int>("WatcherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("WatcherId");

                    b.ToTable("Alert");
                });

            modelBuilder.Entity("Core.Models.SensorMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("SensorMeasurement");

                    b.HasDiscriminator<string>("Discriminator").HasValue("SensorMeasurement");
                });

            modelBuilder.Entity("Core.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPatient")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WatcherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WatcherId");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("Core.Models.Watcher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Watcher");
                });

            modelBuilder.Entity("Core.Models.AirflowSensorMeasurement", b =>
                {
                    b.HasBaseType("Core.Models.SensorMeasurement");

                    b.HasDiscriminator().HasValue("AirflowSensorMeasurement");
                });

            modelBuilder.Entity("Core.Models.BloodPressureSensorMeasurement", b =>
                {
                    b.HasBaseType("Core.Models.SensorMeasurement");

                    b.HasDiscriminator().HasValue("BloodPressureSensorMeasurement");
                });

            modelBuilder.Entity("Core.Models.EcgSensorMeasurement", b =>
                {
                    b.HasBaseType("Core.Models.SensorMeasurement");

                    b.HasDiscriminator().HasValue("EcgSensorMeasurement");
                });

            modelBuilder.Entity("Core.Models.GsrSensorMeasurement", b =>
                {
                    b.HasBaseType("Core.Models.SensorMeasurement");

                    b.HasDiscriminator().HasValue("GsrSensorMeasurement");
                });

            modelBuilder.Entity("Core.Models.PulseOxygenHeartRateSensorMeasurement", b =>
                {
                    b.HasBaseType("Core.Models.SensorMeasurement");

                    b.HasDiscriminator().HasValue("PulseOxygenHeartRateSensorMeasurement");
                });

            modelBuilder.Entity("Core.Models.TemperatureSensorMeasurement", b =>
                {
                    b.HasBaseType("Core.Models.SensorMeasurement");

                    b.HasDiscriminator().HasValue("TemperatureSensorMeasurement");
                });

            modelBuilder.Entity("Core.Models.Alert", b =>
                {
                    b.HasOne("Core.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Watcher", "Watcher")
                        .WithMany()
                        .HasForeignKey("WatcherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Watcher");
                });

            modelBuilder.Entity("Core.Models.SensorMeasurement", b =>
                {
                    b.HasOne("Core.Models.Subject", "Subject")
                        .WithMany("SensorMeasurements")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Core.Models.Subject", b =>
                {
                    b.HasOne("Core.Models.Watcher", "Watcher")
                        .WithMany("Subjects")
                        .HasForeignKey("WatcherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Watcher");
                });

            modelBuilder.Entity("Core.Models.Subject", b =>
                {
                    b.Navigation("SensorMeasurements");
                });

            modelBuilder.Entity("Core.Models.Watcher", b =>
                {
                    b.Navigation("Subjects");
                });
#pragma warning restore 612, 618
        }
    }
}
